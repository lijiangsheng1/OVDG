<?xml version="1.0" encoding="UTF-8"?>
<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  version="5.0"
  xml:id="ovirt_arch">
  <title>oVirt 架构：程序员视野</title>
  <para>这里说的架构要区别于用户应用场景视野的架构，也就是说不会讲网络拓扑结构，
        也不会讲用户业务应用系统的来龙去脉。</para>
   <sect1>
     <title>架构及周边知识</title>
     <para>从三千英里的高空下俯视oVirt：</para>
     <mediaobject>
        <imageobject>
            <imagedata fileref="../media/3000_feet_ovirt_arch.png" width="6in" />
        </imageobject>
     </mediaobject>
     <para>我们减低到差不多和我们身高的高度，再来审视一次oVirt：</para>
     <mediaobject>
        <imageobject>
            <imagedata fileref="../media/Ovirt-1024x698.png" width="6in" />
        </imageobject>
     </mediaobject>
     <para>一般情况，oVirt的部署包含三个部分。</para>
     <orderedlist numeration="arabic">
        <listitem><para>oVirt-engine,用于部署、监控、移动、创建、启动/停止虚拟机，镜像，
                        配置存储，网络等等。可谓是一个中央控制中心。</para></listitem>
        <listitem><para>一个或多个主机节点，这是运行虚拟机的服务器。</para></listitem>
        <listitem><para>一个或多个存储，存储虚拟机的镜像或者安装、应用程序的ISO等。</para></listitem>
     </orderedlist>
     <para>外挂身份认证系统也是oVirt的一个特性，支持的产品有微软的活动目录，FreeIPA,以及
           OpenLDAP。</para>
     <para></para>
   </sect1>
   <sect1>
     <title>深入到程序的角度来观察下整体的架构,如下图所示：</title>
     <mediaobject>
        <imageobject>
            <imagedata fileref="../media/Ovirt-all-arch.png" width="6in" />
        </imageobject>
     </mediaobject>
     <para>以下对各个组件作简单的概述。</para>
     <orderedlist numeration="arabic">
        <listitem><para>Engine:管理oVirt主机，存储，网络，虚拟机生命周期管理，调度，集群管理
                       等，是整体架构的“大脑”。</para></listitem>
        <listitem><para>管理员门户：基于web的用户界面，为系统管理员提供可视化的管理工具。   
                        </para></listitem>
        <listitem><para>用户门户：为最终用户提供的简单访问应用，基于Web的图形界面。          
                        </para></listitem>
        <listitem><para>REST API: 一个允许应用程序执行虚拟操作的API，命令行工具和 python SDK 
                        就是基于它而实现的。</para></listitem>
        <listitem><para>CLI/SDK - 命令行界面和 SDK 提供了一种通过脚本操作与 engine 进行通信的
                        方式。</para></listitem>
        <listitem><para>数据库 - 为ovirt 部署的配置提供了持久性的信息存储， engine 使用Postgres
                        关系型数据库。</para></listitem>
        <listitem><para>主机代理 (VDSM) - oVirt engine 与 VSDM 进行交流，向主机请求与虚拟机相
                        关的操作。</para></listitem>
        <listitem><para>DWH (数据仓库) - 数据仓库组件在数据上实行 ETL 操作，这些数据从使用了 
                        Talend 的数据库中抽取出来，操作执行后会将数据插至历史库中。
                  </para></listitem>
        <listitem><para>报表引擎 - 使用 Jasper 报表生成基于历史库的数据和系统资源使用情况的报告。
                  </para></listitem>
        <listitem><para>SPICE 客户端 - 允许用户访问虚拟机的SPICE协议的客户端实现。</para>
                         </listitem>
        <listitem><para>Guest agent - 安装在客户操作系统中的代理程序，通过virtio-serial和VDSM
                        通信，用来收集客户操作系统的监控信息，以及单点登录的实现。
                  </para></listitem>
     </orderedlist>
     <para></para>
   <sect2>
     <title>Engine</title>
     <para>Engine具有的一些功能： </para>i
     <orderedlist numeration="arabic">
         <listitem><para>虚拟机生命周期管理</para></listitem>
         <listitem><para>实现了AAA的插件机制，可以使用如LDAP，来进行身份认证。</para></listitem>
         <listitem><para>网络管理</para></listitem>
         <listitem><para>存储管理</para></listitem>
         <listitem><para>虚拟机高可用，应用高可用。</para></listitem>
         <listitem><para>集群内主机间的虚拟机在线迁移。</para></listitem>
         <listitem><para>系统调度，基于使用率和策略的负载均衡。</para></listitem>
         <listitem><para>节能：在非高峰期将所有负载集中。</para></listitem>
         <listitem><para>主机维护，在计划内的宕机/升级中，主机可置为维护模式，虚拟机毋须停机。</para></listitem>
         <listitem><para>镜像管理，基于模板的配置，thin provison以及快照。</para></listitem>
         <listitem><para>监控，实时收集系统信息，网络、存储等。</para></listitem>
         <listitem><para>导入/导出虚拟机，支持OVF标准。</para></listitem>
     </orderedlist>
     <para>下图按照功能，将engine做了模块化的表达：</para>
     <mediaobject>
        <imageobject>
            <imagedata fileref="../media/Engine-arch.png" width="6in" />
        </imageobject>
     </mediaobject>
   </sect2>
   <sect2>
     <title>Engine-core architecture</title>
     <para>下图是以java EJB的实现来表述engine的运行原理。已经深入到代码模块。 </para>
     <mediaobject>
        <imageobject>
            <imagedata fileref="../media/Engine-arch2.png" width="6in" />
        </imageobject>
     </mediaobject>
     <para>engine的EJB主要有：</para>
     <itemizedlist mark='opencircle'>
       <listitem><para>DB Broker: 管理所有与关系型数据库的操作。</para></listitem>
       <listitem><para>VDS Broker: 负责所有与VDSM交互的操作。</para></listitem>
       <listitem><para>LDAP Broker: 弃用，使用AAA模块。</para></listitem>
       <listitem><para>Backend Bean： 单例Bean,负责运行不同实体的指令、查询和监控。</para></listitem>
     </itemizedlist>
   </sect2>
   <sect2>
     <title>主机代理VDSM</title>
     <para>详情请到章节<xref linkend="vdsm_arch"/>。</para>
     <para>针对系统管理员非常有用的工具hooks,请到<xref linkend="vdsm_hooks"/>一探究竟。</para>
   </sect2>
   <sect2>
     <title>MoM</title>
     <para>VDSM是和MoM集成在一起的。MOM配置了策略。这些策略的使用者可以微调
           主机的高内存过量使用或安全操作。为了控制它的mom实例，vdsm为其传递了一个mom
           配置文件并且mom策略文件可以设置mom的缺省行为。刚开始，vdsmd利用配置和策略文
           件导入了mom并将其初始化。从那时起，mom通过API.py中定义好的API与vdsm进行交互
           并且控制了运行在主机上的每个虚拟机的内存。mom实例作为vdsm守护进程内的线程运
           行。</para>
     <para>运行原理图如下所示：</para>
     <mediaobject>
        <imageobject>
            <imagedata fileref="../media/Mom_vdsm.jpg" width="6in" />
        </imageobject>
     </mediaobject>
   </sect2>
   <sect2>
     <title>基于Web的富客户端应用：</title>
     <para>下图以一个抽象的视角表述了oVirt Web应用的内部组件：</para>
     <mediaobject>
        <imageobject>
            <imagedata fileref="../media/Ovirt-ui-architecture.png" width="6in" />
        </imageobject>
     </mediaobject>
     <itemizedlist mark='opencircle'>
       <listitem><para>GWT（google web toolkit）:基于java语言编写的SDK，为构建web应用提供
                       工具和接口。</para></listitem>
       <listitem><para>GWT Platform: 基于GWT开发的MVP框架。</para></listitem>
       <listitem><para>GWT INjection: GWT的依赖注入框架。</para></listitem>
       <listitem><para>oVirt GWT common: oVrt 管理员门户和用户门户使用的抽象类。</para></listitem>
       <listitem><para>oVirt UI Plugin: 允许管理员门户书写额外的扩展，接受基于javascript
                       写的插件。</para></listitem>
     </itemizedlist>
     <para>下图展示了一个典型的基于GWT开发的流程：</para>     
     <mediaobject>
        <imageobject>
            <imagedata fileref="../media/Gwt-development-workflow.png" width="6in" />
        </imageobject>
     </mediaobject>
     <para>要设计一个基于GWT的web应用，有下面的好处：</para>
     <itemizedlist mark='opencircle'>
          <listitem><para>将web浏览器当作应用程序的平台，通过基于JavaScript的应用程序，交付
                          丰富的用户体验。</para></listitem>
          <listitem><para>依赖注入和事件总线，使得松耦合架构成为可能。</para></listitem>
          <listitem><para>Model-View-Presenter 清晰的将展现层和业务逻辑层分离。</para></listitem>
          <listitem><para></para></listitem>
     </itemizedlist>
   </sect2>
   <sect2>
     <title>REST API,开发SDK，及命令行工具</title>
     <para> </para>
   </sect2>
   <sect2>
     <title>Report Engine</title>
     <para> </para>
   </sect2>
   <sect2>
     <title>DWH</title>
     <para> </para>
   </sect2>
   <sect2>
     <title>来宾操作系统代理</title>
     <para>来宾操作系统代理为oVirt Engine提供额外的信息，诸如获取内存的使用、IP地址、已经安装的
           程序以及实现单点登录sso等。 </para>
     <para>高度抽象的模块化表述:</para>
     <mediaobject>
        <imageobject>
            <imagedata fileref="../media/Guest-agent-arch.png" width="6in" />
        </imageobject>
     </mediaobject>
     <para>oVirt 来宾操作系统代理有以下几个注意的实现细节:</para>
     <itemizedlist mark='opencircle'>
          <listitem><para>基于python语言编写，跨平台，支持windows和Linux。
                         </para></listitem>
          <listitem><para>充分利用virtio-serial，显示来宾操作系统内部信息到vdsm再到ovirt engine。
                          </para></listitem>
          <listitem><para>SSO在windows的实现，不同的版本机制不一，如在windows XP中使用的gina模块，
                          在Windows7则使用的是凭证机制。</para></listitem>
          <listitem><para>SSO在RHEL6系列中的实现是基于PAM模块，同时支持gnome和KDE。</para></listitem>
     </itemizedlist>
   </sect2>
   </sect1>
</section>
